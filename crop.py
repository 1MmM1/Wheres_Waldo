from image_slicer import slice
from PIL import Image
import os
import shutil

def main():
    # CHANGE THESE VARIABLES
    originalImage = './1.jpg'
    waldoTiles = ['temp_08_12.png', 'temp_09_12.png'] # Tiles that Waldo are found in, generated by our NN.
    
    rows, cols = cropTiles(originalImage) 
    stitchTiles(rows, cols, waldoTiles) 

def cropTiles(src):
    """
    Crops the width/height of the original image to multiples of 64 and generates 64x64 tile images.

    Args:
        src (string): the path to the image to crop
    Returns:
        The number of rows and columns of the image after tiling
    """
    print("CROPPING ORIGINAL IMAGE...")
    im = Image.open(src)
    width, height = im.size

    rWidth = width % 64
    rHeight = height % 64
    imCrop = im.crop((rWidth / 2, rHeight / 2, width - rWidth / 2, height - rHeight / 2))
    if not os.path.isdir('./temp'):
        os.mkdir('./temp')
    # Temporarily saves a cropped version of the original file with height/width as multiples of 64.
    imCrop.save('./temp/temp.jpg')
    cropWidth, cropHeight = imCrop.size

    numRows = int(cropHeight / 64)
    numCols = int(cropWidth / 64)

    print("GENERATING 64X64 TILES...")
    # Generates 64x64 tiles
    slice('./temp/temp.jpg', col=numCols, row=numRows, save=True)
    # Removes the cropped original image after generating tiles.
    os.remove('./temp/temp.jpg') 

    return (numRows, numCols)

def stitchTiles(rows, cols, waldoTiles):
    """
    Stiches the tiles back together in black and white, only leaving the specified waldoTiles 
    in color. Saves the final image as foundwaldo.jpg and deletes the temporary images.
    """
    print("STITCHING TILES...")
    newImage = Image.new('RGB', (64 * cols, 64 * rows))
    ims = []

    # Iterates through the cropped images and adds them to a list.
    for tile in os.listdir('./temp/'):
        im = Image.open(f'./temp/{tile}')
        if tile not in waldoTiles:
            im = im.convert('1')
        ims.append(im)

    # "Pastes" the cropped tiles into newImage.
    i, x, y = 0, 0, 0
    for _ in range(rows):
        for _ in range(cols):
            newImage.paste(ims[i], (x, y))
            i += 1
            x += 64
        y += 64
        x = 0

    newImage.save("./foundwaldo.jpg")

    print("DELETING TILES...")
    # Removes the temp directory containing the cropped images.
    shutil.rmtree('./temp')

if __name__ == '__main__':
    main()